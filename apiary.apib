FORMAT: 1A

# Tagallery
Tagallery is a tag-based web gallery.

# API
All calls require a token to be accepted.

## Token [/token]
The token has no expiration time and can be be used as long as the user wants.
Once a new token is requested, any previous token assigned to the user will be
invalidated.

### Request an access token [POST]
+ Request (application/json)

        { "username": "username", "password": "password" }
        
+ Response 200 (application/json)

        {
            "meta": { "status": "OK" },
            "data": {
                "token": "accesstoken"
            }
        }
        
+ Response 404 (application/json)

        {
            "meta": { "status": "ERROR",
                      "code": "UNKNONW_USER",
                      "message": "Invalid user or password" }
        }

## Tags [/tag]
### Get all tags [GET]
+ Request (application/json)

    + Header
    
            X-Tagallery-Token: accesstoken
        
+ Response 200 (application/json)

        {
            "meta": {"status": "OK" },
            "data": [
                { "id": 1, "jpg" },
                { "id": 2, "gif" }
            ]
        }

+ Response 401 (application/json)

        {
            "meta": { "status": "ERROR",
                      "error": "INVALID_TOKEN",
                      "message": "Invalid access token" }
        }

## Single tag manipulation [/tag/{id}]

### Create a tag [POST]

+ Request (application/json)

    + Header
    
            X-Tagallery-Token: accesstoken
            
    + Body
    
            { "name": "tag name" }

+ Response 200 (application/json)

        {
            "meta": { "status": "OK" },
            "data": {
                "id": 1,
                "name": "tag name"
            }
        }
        
+ Response 401 (application/json)

        {
            "meta": { "status": "ERROR",
                      "error": "INVALID_TOKEN",
                      "message": "Invalid access token" }
        }
        
### Update a tag [PUT]

+ Request (application/json)

    + Header
    
            X-Tagallery-Token: accesstoken
            
    + Body
    
            { "name": "new tag name" }
            
+ Response 200 (application/json)

        {
            "meta": { "status": "OK" },
            "data": {
                "id": 1,
                "name": "tag name"
            }
        }
        
+ Response 401 (application/json)

        {
            "meta": { "status": "ERROR",
                      "error": "INVALID_TOKEN",
                      "message": "Invalid access token" }
        }
        
+ Response 404 (application/json)

        {
            "meta": { "status": "ERROR", 
                      "error": "UNKNOWN_TAG",
                      "message": "The tag doesn't exist" }
        }

### Delete a note [DELETE]

Optionally, the request may contain the ID of another tag, making all images
that contain the tag {id} to be retagged with the new tag (this basically _merges_
two tags). In case of either tag doesn't exist, no changes will occur.

+ Request (application/json)

    + Header
    
            X-Tagallery-Token: accesstoken

+ Response 200 (application/json)

        {
            "meta": { "status": "OK" }
        }
        
+ Request (application/json)
    
    + Header
    
            X-Tagallery-Token: accesstoken

    + Body
    
            { "merge_with": 2 }
            
+ Response 200 (application/json)

        {
            "meta": { "status": "OK",
                      "merged_with": 2 }
        }
        
+ Response 401 (application/json)

        {
            "meta": { "status": "ERROR",
                      "error": "INVALID_TOKEN",
                      "message": "Invalid access token" }
        }
        
+ Response 404 (application/json)

        {
            "meta": { "status": "ERROR", 
                      "error": "UNKNOWN_TAG",
                      "message": "The tag doesn't exist" }
        }

## Note [/notes/{id}]
A single Note object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve a Note [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }